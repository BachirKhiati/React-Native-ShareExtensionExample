{
  "_args": [
    [
      {
        "hosted": {
          "directUrl": "https://raw.githubusercontent.com/BigPun86/react-native-share-extension/master/package.json",
          "gitUrl": "git://github.com/BigPun86/react-native-share-extension.git",
          "httpsUrl": "git+https://github.com/BigPun86/react-native-share-extension.git",
          "shortcut": "github:BigPun86/react-native-share-extension",
          "ssh": "git@github.com:BigPun86/react-native-share-extension.git",
          "sshUrl": "git+ssh://git@github.com/BigPun86/react-native-share-extension.git",
          "type": "github"
        },
        "name": "react-native-share-extension",
        "raw": "react-native-share-extension@git+https://github.com/BigPun86/react-native-share-extension.git",
        "rawSpec": "git+https://github.com/BigPun86/react-native-share-extension.git",
        "scope": null,
        "spec": "git+https://github.com/BigPun86/react-native-share-extension.git",
        "type": "hosted"
      },
      "/Users/Adel/Development/Projects/OpenSource/ShareInExample"
    ]
  ],
  "_from": "git+https://github.com/BigPun86/react-native-share-extension.git",
  "_id": "react-native-share-extension@1.3.3",
  "_inCache": true,
  "_installable": true,
  "_location": "/react-native-share-extension",
  "_phantomChildren": {},
  "_requested": {
    "hosted": {
      "directUrl": "https://raw.githubusercontent.com/BigPun86/react-native-share-extension/master/package.json",
      "gitUrl": "git://github.com/BigPun86/react-native-share-extension.git",
      "httpsUrl": "git+https://github.com/BigPun86/react-native-share-extension.git",
      "shortcut": "github:BigPun86/react-native-share-extension",
      "ssh": "git@github.com:BigPun86/react-native-share-extension.git",
      "sshUrl": "git+ssh://git@github.com/BigPun86/react-native-share-extension.git",
      "type": "github"
    },
    "name": "react-native-share-extension",
    "raw": "react-native-share-extension@git+https://github.com/BigPun86/react-native-share-extension.git",
    "rawSpec": "git+https://github.com/BigPun86/react-native-share-extension.git",
    "scope": null,
    "spec": "git+https://github.com/BigPun86/react-native-share-extension.git",
    "type": "hosted"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "git+https://github.com/BigPun86/react-native-share-extension.git#736096caeb193a3e4468a229c426e3eccc830471",
  "_shasum": "476817009a5af1b33e91a7002b3f6acccf21d504",
  "_shrinkwrap": null,
  "_spec": "react-native-share-extension@git+https://github.com/BigPun86/react-native-share-extension.git",
  "_where": "/Users/Adel/Development/Projects/OpenSource/ShareInExample",
  "author": {
    "email": "adel.grimm@icloud.com",
    "name": "Adel Bruno Grimm",
    "url": "http://github.com/BigPun86"
  },
  "bugs": {
    "url": "https://github.com/BigPun86/react-native-share-extension"
  },
  "dependencies": {},
  "description": "share extension using react-native for both ios and android",
  "devDependencies": {},
  "gitHead": "736096caeb193a3e4468a229c426e3eccc830471",
  "homepage": "https://github.com/BigPun86/react-native-share-extension",
  "keywords": [
    "react-component",
    "react-native",
    "share-extension"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "name": "react-native-share-extension",
  "optionalDependencies": {},
  "readme": "# React Native Share Extension\n\nThis is a helper module which brings react native as an engine to drive share extension for your app.\n\n<p align=\"center\">\n    <img src =\"https://raw.githubusercontent.com/alinz/react-native-share-extension/master/assets/ios-demo.gif\" />\n    <img src =\"https://raw.githubusercontent.com/alinz/react-native-share-extension/master/assets/android-demo.gif\" />\n</p>\n\n# Installation\n\ninstallation should be very easy by just installing it from npm.\n\n```js\nnpm install react-native-share-extension --save\n```\n\n# Setup\n\nthe setup requires a little bit more work. I will try to describe as detail as possible. I would love to use `rnpm` so I will welcome pull request.\n\n## iOS\n\n- click on your project's name\n- click on `+` sign\n\n<p align=\"center\">\n    <img src =\"https://raw.githubusercontent.com/alinz/react-native-share-extension/master/assets/ios_step_01.png\" />\n</p>\n\n- select `Share Extension` under `iOS > Application Extension`\n\n<p align=\"center\">\n    <img src =\"https://raw.githubusercontent.com/alinz/react-native-share-extension/master/assets/ios_step_02.png\" />\n</p>\n\n- select a name for your new share extension, in my case I chose `MyShareEx`\n\n<p align=\"center\">\n    <img src =\"https://raw.githubusercontent.com/alinz/react-native-share-extension/master/assets/ios_step_03.png\" />\n</p>\n\n- replace the code of `ShareViewController.h` and `ShareViewController.m` with follwoing: \n\n###ShareViewController.h =>\n\n```objc\n\n#import <Foundation/Foundation.h>\n\n// Need config this two value bellows:\n\nstatic NSString *const KApp_Scheme = @\"main://\";\n\nstatic NSString *const KApp_Group_ID = @\"your.group.id\";\n\n@interface ShareMaster : NSObject\n\n+ (NSString*)store:(NSString*) urlStr   name:(NSString*) name;\n\n+ (NSString*)storeData:(NSData*) data   name:(NSString*) name ;\n\n+ (NSURL*)combineURL:(NSString*)name;\n\n@end\n```\n\n###ShareViewController.m =>\n\n```objc\n\n#import \"ShareMaster.h\"\n\n@implementation ShareMaster\n\n+ (NSString*)store:(NSString*) urlStr   name:(NSString*) name {\n  NSLog(@\"will storeData read from ->%@\",urlStr);\n  NSFileManager *fileManager = [NSFileManager defaultManager];\n   \n  NSData* data = [fileManager contentsAtPath:urlStr];\n  return [ShareMaster storeData:data name:name];\n}\n\n+ (NSString*)storeData:(NSData*) data   name:(NSString*) name {\n  NSURL* fileURL = [ShareMaster combineURL:name ];\n  NSLog(@\"will storeData->%@\",fileURL);\n  NSError* error;\n  BOOL result =[data writeToURL:fileURL options:NSDataWritingAtomic error:&error];\n  //  [data writeToURL:fileURL atomically:true];\n  NSLog(@\"storeData->%@\",result ? @\"success\": @\"failed\");\n  return [fileURL absoluteString];\n}\n\n+ (NSURL*)combineURL:(NSString*)name{\n  NSURL *groupURL = [ShareMaster getWorkDir];\n  NSURL *fileURL = [groupURL URLByAppendingPathComponent:name];\n  return fileURL;\n}\n\n+ (NSURL*)getWorkDir{\n  NSURL *groupURL = [[NSFileManager defaultManager] containerURLForSecurityApplicationGroupIdentifier:KApp_Group_ID];\n  NSURL* result = [groupURL URLByAppendingPathComponent:@\"user_share\"];\n  [ShareMaster createDirAtSharedContainerPath:[result path]];\n  return result;\n}\n\n+(void)createDirAtSharedContainerPath:(NSString*)dirPath\n{\n  BOOL isdir;\n  NSError *error = nil;\n  \n  NSFileManager *mgr = [[NSFileManager alloc]init];\n\n  if (![mgr fileExistsAtPath:dirPath isDirectory:&isdir]) { //create a dir only that does not exists\n    if (![mgr createDirectoryAtPath:dirPath withIntermediateDirectories:YES attributes:nil error:&error]) {\n      NSLog(@\"error while creating dir: %@\", error.localizedDescription);\n    } else {\n      NSLog(@\"dir was created....\");\n    }\n  }\n}\n\n@end\n```\n\n- create new file under your share extension group. in my case it was `MyShareEx`\n\n<p align=\"center\">\n    <img src =\"https://raw.githubusercontent.com/alinz/react-native-share-extension/master/assets/ios_step_05.png\" />\n</p>\n\n- make sure the type of that object is `Objective-c File`, e.g. for `MyShareEx` name it `MyShareEx.m`\n\n<p align=\"center\">\n    <img src =\"https://raw.githubusercontent.com/alinz/react-native-share-extension/master/assets/ios_step_06.png\" />\n</p>\n\n<p align=\"center\">\n    <img src =\"https://raw.githubusercontent.com/alinz/react-native-share-extension/master/assets/ios_step_07.png\" />\n</p>\n\n- update the storyboard of your share extension where the view needs to be loaded. So click on `MainInterface.storyboard` and replace the class field from `ShareViewController` to whatever you chose above (in my case `MyShareEx`)\n\n<p align=\"center\">\n    <img src =\"https://raw.githubusercontent.com/alinz/react-native-share-extension/master/assets/ios_step_08.png\" />\n</p>\n\n- now it's time to add our library. Right click on `Libraries` group and select `Add Files to \"Sample1\"...`\n\n<p align=\"center\">\n    <img src =\"https://raw.githubusercontent.com/alinz/react-native-share-extension/master/assets/ios_step_09.png\" />\n</p>\n\n- select `node_modules` > `react-native-share-extension` > `ios` > `ReactNativeShareExtension.xcodeproj`\n\n<p align=\"center\">\n    <img src =\"https://raw.githubusercontent.com/alinz/react-native-share-extension/master/assets/ios_step_10.png\" />\n</p>\n\n- now we need to tell the share extension that we want to read new header files. click on project name, in my case `Sample1` then click on your extension name (in my case `MyShareEx`). After that click on Build Settings and search for `Header Search Paths`\n\n<p align=\"center\">\n    <img src =\"https://raw.githubusercontent.com/alinz/react-native-share-extension/master/assets/ios_step_11.png\" />\n</p>\n\n- add the new path `$(SRCROOT)/../node_modules/react-native-share-extension/ios` with `recursive` selected.\n\n<p align=\"center\">\n    <img src =\"https://raw.githubusercontent.com/alinz/react-native-share-extension/master/assets/ios_step_12.png\" />\n</p>\n\n- we need to add some flags as well, so search for `Other Linker Flags` and add `-ObjC` and `-lc++`\n\n<p align=\"center\">\n    <img src =\"https://raw.githubusercontent.com/alinz/react-native-share-extension/master/assets/ios_step_13.png\" />\n</p>\n\n- we also need to add all the static libraries such as react and Share Extension. so select `General` tab and under `Linked frameworks and Libraries` click on `+` and add all of the selected static binaries there.\n\n<p align=\"center\">\n    <img src =\"https://raw.githubusercontent.com/alinz/react-native-share-extension/master/assets/ios_step_14.png\" />\n</p>\n\n- we need to modify the `Info.plist` inside the extension (e.g. `MyShareEx/Info.plist`) to make sure that our share extension can connect to internet. This is useful if you need your share extension connects to your api server or react-native remote server dev. For doing that we need to `App Transport Security Settings` to `Info.plist`\n\n<p align=\"center\">\n    <img src =\"https://raw.githubusercontent.com/alinz/react-native-share-extension/master/assets/ios_step_15.png\" />\n</p>\n\n- now go back to your extension file (in my case `MyShareEx.m`) and paste the following code there **being sure to substitute `MyShareEx` in all three places for whatever you chose above**\n\n```objective-c\n#import <Foundation/Foundation.h>\n#import \"ReactNativeShareExtension.h\"\n#import \"React/RCTBundleURLProvider.h\"\n#import \"React/RCTRootView.h\"\n\n@interface MyShareEx : ReactNativeShareExtension\n@end\n\n@implementation MyShareEx\n\nRCT_EXPORT_MODULE();\n\n- (UIView*) shareView {\n  NSURL *jsCodeLocation;\n\n  jsCodeLocation = [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\"index.ios\" fallbackResource:nil];\n\n  RCTRootView *rootView = [[RCTRootView alloc] initWithBundleURL:jsCodeLocation\n                                                      moduleName:@\"MyShareEx\"\n                                               initialProperties:nil\n                                                   launchOptions:nil];\n  rootView.backgroundColor = nil;\n  return rootView;\n}\n\n\n- (void)loadImageBackToMainApp{\n  //@step gather the image and then save to shared directonry\n  //  then pass the saved file URL to Main App with URL scheme\n  [self load:^(NSString *value, UIImage *image, NSString *contentType, NSException *exception) {\n    \n    NSString* keyName = @\"myimage.png\";\n    NSData* pictureData = UIImagePNGRepresentation(image);\n    NSString* imageURL = [ShareMaster storeData:pictureData name:keyName];\n    //[self performSelector:@selector(lauchHostApp:) withObject:keyName afterDelay:0.1];\n    [self lauchHostApp:imageURL];\n    [self.extensionContext completeRequestReturningItems:@[] completionHandler:nil];\n  }];\n  \n}\n\n- (void)lauchHostApp:(NSString*)keyName{\n  NSString* url = [NSString stringWithFormat:@\"%@?imageUrl=%@\", KApp_Scheme,keyName];\n  NSURL *destinationURL = [NSURL URLWithString: url];\n  \n  // Get \"UIApplication\" class name through ASCII Character codes.\n  NSString *className = [[NSString alloc] initWithData:[NSData dataWithBytes:(unsigned char []){0x55, 0x49, 0x41, 0x70, 0x70, 0x6C, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6F, 0x6E} length:13] encoding:NSASCIIStringEncoding];\n  if (NSClassFromString(className)) {\n    id object = [NSClassFromString(className) performSelector:@selector(sharedApplication)];\n    [object performSelector:@selector(openURL:) withObject:destinationURL];\n  }\n}\n\n@end\n```\n\n###Enable App Groups for Image Sharing\n\n- final configuration for ios is to enable app groups for both targets, Main-App & ShareExtension. As soon as you have successfully created the app groups for both targets then u have to update the app group placehaolder within ShareViewController.h file. From now on you can share images into your app on a ios device\n\n- now try to build the project. it should build successfully.\n\n##Add deep linking so host app will be opened\n\t<key>CFBundleURLTypes</key>\n\t<array>\n\t\t<dict>\n\t\t\t<key>CFBundleTypeRole</key>\n\t\t\t<string>Editor</string>\n\t\t\t<key>CFBundleURLName</key>\n\t\t\t<string>share</string>\n\t\t\t<key>CFBundleURLSchemes</key>\n\t\t\t<array>\n\t\t\t\t<string>main</string>\n\t\t\t</array>\n\t\t</dict>\n\t\t<dict/>\n\t</array>\n\n## Android\n\n- edit `android/settings.gradle` file and add the following\n\n```\ninclude ':app', ':react-native-share-extension'\n\nproject(':react-native-share-extension').projectDir = new File(rootProject.projectDir, '../node_modules/react-native-share-extension/android')\n```\n\n- edit `android/app/build.gradle` and add the following line before react section in dependency\n\n```\ndependencies {\n    ...\n    compile project(':react-native-share-extension')\n    compile \"com.facebook.react:react-native:+\"\n}\n```\n\n- create a folder called `share` under your java project and create two files. Call them `ShareActivity.java` and `ShareApplication.java`....just like your main project.\n\n- ShareActivity should look like this\n\n```java\n// define your share project, if your main project is com.sample1, then com.sample1.share makes sense....\npackage com.sample1.share;\n\n\n// import ReactActivity\nimport com.facebook.react.ReactActivity;\n\n\npublic class ShareActivity extends ReactActivity {\n    @Override\n    protected String getMainComponentName() {\n      // this is the name AppRegistry will use to launch the Share View\n        return \"MyShareEx\";\n    }\n\n}\n```\n\n- ShareApplication should look like this\n\n```java\n// your package you defined in ShareActivity\npackage com.sample1.share;\n// import build config\nimport com.sample1.BuildConfig;\n\nimport com.alinz.parkerdan.shareextension.SharePackage;\n\nimport android.app.Application;\n\nimport com.facebook.react.shell.MainReactPackage;\nimport com.facebook.react.ReactNativeHost;\nimport com.facebook.react.ReactApplication;\nimport com.facebook.react.ReactPackage;\n\nimport java.util.Arrays;\nimport java.util.List;\n\n\npublic class ShareApplication extends Application implements ReactApplication {\n private final ReactNativeHost mReactNativeHost = new ReactNativeHost(this) {\n   @Override\n   protected boolean getUseDeveloperSupport() {\n     return BuildConfig.DEBUG;\n\n   }\n\n   @Override\n   protected List<ReactPackage> getPackages() {\n     return Arrays.<ReactPackage>asList(\n         new MainReactPackage(),\n         new SharePackage()\n     );\n   }\n };\n\n @Override\n public ReactNativeHost getReactNativeHost() {\n     return mReactNativeHost;\n }\n}\n```\n\n- MainApplication should look like this\n```java\n// your package you defined in ShareActivity\npackage com.sample1;\n\nimport android.app.Application;\nimport android.util.Log;\n\nimport com.facebook.react.ReactApplication;\nimport com.facebook.react.ReactInstanceManager;\nimport com.facebook.react.ReactNativeHost;\nimport com.facebook.react.ReactPackage;\nimport com.facebook.react.shell.MainReactPackage;\n\nimport com.alinz.parkerdan.shareextension.SharePackage;\n\nimport java.util.Arrays;\nimport java.util.List;\n\npublic class MainApplication extends Application implements ReactApplication {\n\n  private final ReactNativeHost mReactNativeHost = new ReactNativeHost(this) {\n    @Override\n    protected boolean getUseDeveloperSupport() {\n      return BuildConfig.DEBUG;\n    }\n\n    @Override\n    protected List<ReactPackage> getPackages() {\n      return Arrays.<ReactPackage>asList(\n          new MainReactPackage(),\n          new SharePackage()\n      );\n    }\n  };\n\n  @Override\n  public ReactNativeHost getReactNativeHost() {\n      return mReactNativeHost;\n  }\n}\n```\n\n- edit `android/app/src/main/AndroidMainfest.xml` and add the new `activity` right after `devSettingActivity`.\n\n```xml\n<activity android:name=\"com.facebook.react.devsupport.DevSettingsActivity\"/>\n\n<activity\n    android:noHistory=\"true\"\n    android:name=\".share.ShareActivity\"\n    android:configChanges=\"orientation\"\n    android:label=\"@string/title_activity_share\"\n    android:screenOrientation=\"portrait\"\n    android:theme=\"@style/Theme.Share.Transparent\" >\n   <intent-filter>\n     <action android:name=\"android.intent.action.SEND\" />\n     <category android:name=\"android.intent.category.DEFAULT\" />\n    //  for sharing links include\n     <data android:mimeType=\"text/plain\" />\n    //  for sharing photos include\n    <data android:mimeType=\"image/*\" />\n   </intent-filter>\n</activity>\n```\n\nin this new `activity` I have used 2 variables `@string/title_activity_share` and `@style/Theme.Share.Transparent`. you can add those in `res/values`.\n\nso in `values/strings.xml`\n\n```xml\n<resources>\n    ...\n    <string name=\"title_activity_share\">MyShareEx</string>\n</resources>\n```\n\nand in `values/styles.xml`\n\n```xml\n<resources>\n    ...\n    <style name=\"Share.Window\" parent=\"android:Theme\">\n        <item name=\"android:windowEnterAnimation\">@null</item>\n        <item name=\"android:windowExitAnimation\">@null</item>\n    </style>\n\n    <style name=\"Theme.Share.Transparent\" parent=\"android:Theme\">\n        <item name=\"android:windowIsTranslucent\">true</item>\n        <item name=\"android:windowBackground\">@android:color/transparent</item>\n        <item name=\"android:windowContentOverlay\">@null</item>\n        <item name=\"android:windowNoTitle\">true</item>\n        <item name=\"android:windowIsFloating\">true</item>\n        <item name=\"android:backgroundDimEnabled\">true</item>\n        <item name=\"android:windowAnimationStyle\">@style/Share.Window</item>\n    </style>\n</resources>\n```\n\n- now you should be able to compile the code without error.\n\n> if you need to add more packages to your share extension do not overrides\n`getPackages`. instead override `getMorePackages` method under `ShareExActivity`.\n\n# Share Component for Android\n\nso both share extension and main application are using the same code base, or same main.jsbundle file. So the trick to separate Share and Main App is registering 2 different Component entries with `AppRegistry.registerComponent`.\n\nas we have treated the ios part a bit differnet to the android part, please do the next steps only for android. so in the android share extension we are telling react to load the extension component (in my case `MyShareEx`) from js.\n\nso in `index.android.js` write following code\n\n```js\n//index.android.js\nimport React from 'react'\nimport { AppRegistry } from 'react-native'\n\nimport App from './app.android'\nimport Share from './share.android'\n\nAppRegistry.registerComponent('Sample1', () => App)\nAppRegistry.registerComponent('MyShareEx', () => Share) // TODO: Replace MyShareEx with my extension name\n```\n\n```js\n//index.ios.js\nimport React from 'react'\nimport { AppRegistry } from 'react-native'\n\nimport App from './app.ios'\nAppRegistry.registerComponent('Sample1', () => App)\n```\n\nso the `app.android.js` refers to main app and `share.android.js` refers to share extension.\n\n# Share Extension APIs\n\n- `data()` is a function that returns a promise. Once the promise is resolved, you get two values, `type` and `value`.\n\n```js\nimport ShareExtension from 'react-native-share-extension'\n...\n\nconst { type, value } = await ShareExtension.data()\n```\n\n- `close()`\n\nit simply close the share extension and return the touch event back to application that triggers the share.\n\n# Test on Device without dev-server\n\nbecause share extension in ios devices are separate containers and the do not have access to main app folder, you have to build the script twice and package it inside the share extension container. The easiest way of doing this is create a `New Script Phase` in `Build Phases` of your share extension and copy the following line\n\n```bash\nexport NODE_BINARY=node\n../node_modules/react-native/packager/react-native-xcode.sh\n```\n\n<p align=\"center\">\n    <img src =\"https://raw.githubusercontent.com/alinz/react-native-share-extension/master/assets/ios_step_16.png\" />\n</p>\n\n<p align=\"center\">\n    <img src =\"https://raw.githubusercontent.com/alinz/react-native-share-extension/master/assets/ios_step_17.png\" />\n</p>\n\n# On iOS: Set the NSExtensionActivationRule key in your Info.plist\n\nFor the time being, this package only handles sharing of urls specifically from browsers. In order to tell the system to show your extension only when sharing a url, you must set the `NSExtensionActivationRule` key (under `NSExtensionAttributes`) in the share extension's Info.plist file as follows (this is also needed to pass Apple's reveiw):\n\n```\n<key>NSExtensionAttributes</key>\n<dict>\n  <key>NSExtensionActivationRule</key>\n  <dict>\n    <key>NSExtensionActivationSupportsWebURLWithMaxCount</key>\n    <integer>1</integer>\n  </dict>\n</dict>\n```\n\n<p align=\"center\">\n    <img src =\"https://raw.githubusercontent.com/alinz/react-native-share-extension/master/assets/NSExtensionActivationRule.png\" />\n</p>\n\nNote that while the above will prevent many apps from wrongly sharing using your extension, some apps (e.g., YouTube) will still allow sharing using your extension, which might cause your extension to crash. Check out [this issue](https://github.com/alinz/react-native-share-extension/issues/40) for details.\n\nFor reference about `NSExtensionActivationRule` checkout [Apple's docs](https://developer.apple.com/library/content/documentation/General/Conceptual/ExtensibilityPG/ExtensionScenarios.html#//apple_ref/doc/uid/TP40014214-CH21-SW8)\n\n# Final note\n\nI have used `react-native-modalbox` module to handle the showing and hiding share extension which makes the experience more enjoyable for the user.\n\nCheers\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/BigPun86/react-native-share-extension.git"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "1.3.3"
}
